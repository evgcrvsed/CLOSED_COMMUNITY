from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.types.web_app_info import WebAppInfo
from aiogram.enums import ParseMode
from dotenv import load_dotenv
load_dotenv()

from main import db


router = Router()


class MyCallbackData(CallbackData, prefix="_"):
    param: str


@router.callback_query(F.data == 'profile_delete')
async def profile_delete(clb) -> None:
    buttons_data = db.get_buttons_data()
    # pprint(buttons_data)

    buttons_locked: list = []
    if type(clb) is CallbackQuery:
        buttons_locked = db.get_buttons_locked(user_telegram_id=clb.message.chat.id)
    elif type(clb) is Message:
        buttons_locked = db.get_buttons_locked(user_telegram_id=clb.chat.id)

    # pprint(buttons_locked)

    builder = InlineKeyboardBuilder()
    for index, button in enumerate(buttons_data):
        if index % 2 == 0:
            builder_state = True
        else:
            builder_state = False

        if button in buttons_locked:
            button_text = f'‚úÖ {button}'
        else:
            button_text = f'{button}'

        callback_data = MyCallbackData(param=button).pack()
        if builder_state:
            builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))
        else:
            builder.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    builder.row(InlineKeyboardButton(text='üíµ –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏!', callback_data='build_buttons_map'))

    text = """
__*‚ÑπÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*__

üíé –ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å —Å–∞–º–æ–µ *–≤—ã–≥–æ–¥–Ω–æ–µ* –∏ *–±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ* ~%%%~ _*–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ*_ 

‚¨áÔ∏è –ò–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –µ—â—ë __*–Ω–µ –±—Ä–∞–ª–∏ –∑–∞–π–º*__:    
    """

    if type(clb) is CallbackQuery:
        message = clb.bot.edit_message_reply_markup
        await message(
            chat_id=clb.message.chat.id,
            message_id=clb.message.message_id,
            reply_markup=builder.as_markup()
        )

        await clb.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    elif type(clb) is Message:
        previous_message = clb

        clb: Message = clb

        await clb.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        await previous_message.delete()


@router.callback_query(MyCallbackData.filter())
async def handle_callback(clb: types.CallbackQuery, callback_data: MyCallbackData):
    param = callback_data.param
    # print(clb.message.chat.id)
    db.switch_buttons_locked(user_telegram_id=clb.message.chat.id, name=param)
    # await clb.message.answer(f"Button clicked with parameter: {param}")
    print(f'name:@{clb.from_user.first_name} id:{clb.message.chat.id} pressed:{param}')
    try:
        await profile_delete(clb)
    except Exception as ex:
        pass


@router.callback_query(F.data == 'button_name')
async def button_name(clb) -> None:
    print(f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {button_name}')
    await db.switch_buttons_locked(user_telegram_id=clb.chat.id, name=button_name)


@router.callback_query(F.data == 'build_buttons_map')
async def build_buttons_map(clb: types.CallbackQuery) -> None:
    buttons_data = db.get_buttons_data()
    # pprint(buttons_data)
    buttons_locked: list = []
    if type(clb) is CallbackQuery:
        buttons_locked = db.get_buttons_locked(user_telegram_id=clb.message.chat.id)
    elif type(clb) is Message:
        buttons_locked = db.get_buttons_locked(user_telegram_id=clb.chat.id)

    builder = InlineKeyboardBuilder()
    builder_state: bool = True

    for button in buttons_data:
        # print(buttons_data[button])

        if button in buttons_locked:
            button_text = f'üåê {button}'
            if builder_state:
                builder.row(InlineKeyboardButton(text=button_text, web_app=WebAppInfo(url=buttons_data[button])))
                builder_state = False
            else:
                builder.add(InlineKeyboardButton(text=button_text, web_app=WebAppInfo(url=buttons_data[button])))
                builder_state = True

    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='profile_delete'))

    text = """
ü§ë *–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å\!*

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –æ—Ç 2 –¥–æ 100 —Ç—ã—Å\. —Ä—É–±\. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ\. \(–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤–∞–º –Ω–∞ –∫–∞—Ä—Ç—É\):

üôã‚Äç‚ôÄÔ∏è–°–æ–≤–µ—Ç: —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–º–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∫–µ—Ç—ã —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö, –∞ –ª—É—á—à–µ –≤–æ –≤—Å–µ—Ö\!

üí≥ –ó–∞–π–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ì—Ä–∞–∂–¥–∞–Ω –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ üá∑üá∫\!
    """

    if type(clb) is CallbackQuery:

        message = clb.bot.edit_message_reply_markup
        await message(
            chat_id=clb.message.chat.id,
            message_id=clb.message.message_id,
            reply_markup=builder.as_markup()
        )

        await clb.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    elif type(clb) is Message:
        previous_message = clb

        clb: Message = clb

        await clb.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        await previous_message.delete()
